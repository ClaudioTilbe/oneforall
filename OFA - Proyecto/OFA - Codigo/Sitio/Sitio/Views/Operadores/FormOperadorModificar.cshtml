@model Sitio.Models.Operador

@*Necesarios para utilizar la Session*@
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor Accessor
@using Sitio.Utility; @* Codigo para facilitar seleccion de Layout para Views *@


@{
    ViewBag.Title = "Modificar Operador";

    var UsuarioLogueado = Accessor.HttpContext.Session.GetObjectFromJson<Usuario>("UsuarioLog");

    Layout = LayoutForViewHelper.GetLayoutForView(UsuarioLogueado);
}

<div class="row mb-3">
    <div class="col-6">
        <h2 class="font-weight-bold">Modificar Operador</h2>
    </div>

</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr /> @*SEPARADOR ============================================================================================= *@

@*        <div class="form-group">
            @Html.LabelFor(model => model.UsuarioID, htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UsuarioID, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.UsuarioID, htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.UsuarioID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.UsuarioID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Contraseña, htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Contraseña, new { htmlAttributes = new { @class = "form-control", type = "password" } })
            </div>
        </div>

        
        <div class="form-group">
            @Html.LabelFor(model => model.MailAsignado.Correo, htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.MailAsignado.Correo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.MailAsignado.Correo)
            </div>
        </div>

     @*   <div class="form-group">
            @Html.Label(null ,"Correos disponibles", htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })

            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MailAsignado.Correo, (SelectList)ViewBag.CorreosDisp)

            </div>
        </div>*@


        <div class="form-group">
            @Html.LabelFor(model => model.NombreSupervisor, htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NombreSupervisor, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NumeroFuncionarioSupervisor, htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NumeroFuncionarioSupervisor, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        @*    <div class="form-group">
    @Html.Label(null, "Sucursales Asignadas", htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
    <div class="col-md-10">
    <input type="text" name="listaSucursales" class="form-control" /> Si desea asignar varias Sucursales ingrese el numero separado por una coma
    </div>
    </div>*@

        <div class="form-group">
            @Html.Label(null, "Sucursales Asignadas", htmlAttributes: new { @class = "control-label col-md-2 font-weight-bold" })
            <div class="col-md-10">
                @if (Model.SucursalesAsignadas == null || Model.SucursalesAsignadas.Count() <= 0)
                {
                    <input type="text" name="listaSucursales" class="form-control" value="" />
                }
                else
                {
                    <input type="text" name="listaSucursales" class="form-control" value="@string.Join(", ", Model.SucursalesAsignadas.Select(x => x.NroSucursal))" />
                }
                <p class="text-muted">Si desea asignar varias Sucursales ingrese el numero separado por una coma.</p>
            </div>
        </div>

        <hr /> @*SEPARADOR ============================================================================================= *@

        @if (!string.IsNullOrEmpty(@ViewBag.Mensaje))
        {
            <div class="alert alert-danger" role="alert">
                @ViewBag.Mensaje
            </div>
        }

        <div class="form-group mt-2">
            <div class="col-md-offset-2 col-md-10 text-center">
                <input type="submit" value="Modificar" class="btn btn-success" />
            </div>
        </div>

    </div>
}



<script src="~/js/estandar.js"></script>

